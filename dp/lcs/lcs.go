package lcs

//计算最长公共子串长度

//我们从a[0]和b[0]开始，依次考察两个字符串中的字符是否匹配。
//
//如果a[i]与b[j]互相匹配，我们将最大公共子串长度加一，并且继续考察a[i+1]和b[j+1]。
//
//如果a[i]与b[j]不匹配，最长公共子串长度不变，这个时候，有两个不同的决策路线：
//
//删除a[i]，或者在b[j]前面加上一个字符a[i]，然后继续考察a[i+1]和b[j]；
//
//删除b[j]，或者在a[i]前面加上一个字符b[j]，然后继续考察a[i]和b[j+1]

//dp
//如果：a[i]==b[j]，那么：max_lcs(i, j)就等于：
//max(max_lcs(i-1,j-1)+1, max_lcs(i-1, j), max_lcs(i, j-1))；
//
//如果：a[i]!=b[j]，那么：max_lcs(i, j)就等于：
//max(max_lcs(i-1,j-1), max_lcs(i-1, j), max_lcs(i, j-1))；
//
//其中max表示求三数中的最大值。
